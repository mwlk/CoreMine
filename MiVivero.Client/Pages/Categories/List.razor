@page "/categories"
@using MiVivero.Models.Common
@using MiVivero.Models.ViewModels
@inject HttpClient HttpClient

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Categorías</MudText>

    <MudTextField @bind-Value="searchString"
                  Placeholder="Buscar..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-4"
                  Immediate="true"
                  OnBlur="ReloadData"
                  OnKeyUp="@(e => { if (e.Key == "Enter") ReloadData(); })" />

    <MudTable T="CategoryViewModel"
              ServerData="LoadServerData"
              RowsPerPageOptions="new int[] { 2, 10, 25, 50, 100 }"
              @bind-CurrentPage="@currentPage"
              @bind-RowsPerPage="@rowsPerPage"
              Bordered="true"
              Hover="true"
              Dense="true"
              Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Listado de Categorías</MudText>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Código</MudTh>
            <MudTh>Nombre</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Código">@context.FullCode</MudTd>
            <MudTd DataLabel="Nombre">@context.Name</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 2, 10, 25, 50,100 }" />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private int currentPage = 0;
    private int rowsPerPage = 2;
    private string searchString = string.Empty;

    private async Task<TableData<CategoryViewModel>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        currentPage = state.Page;
        rowsPerPage = state.PageSize;

        var pageNumber = currentPage + 1;
        var url = $"api/categories?pageNumber={pageNumber}&pageSize={rowsPerPage}";

        if (!string.IsNullOrWhiteSpace(searchString))
            url += $"&Name={Uri.EscapeDataString(searchString)}";

        var response = await HttpClient.GetFromJsonAsync<PagedResult<CategoryViewModel>>(url, cancellationToken);

        return new TableData<CategoryViewModel>
            {
                TotalItems = response?.TotalCount ?? 0,
                Items = response?.Items ?? new List<CategoryViewModel>()
            };
    }

    private async Task ReloadData()
    {
        await Task.Delay(1); // da tiempo a terminar binding del campo
        currentPage = 0;
    }
}
