@page "/categories/new"

@using System.ComponentModel.DataAnnotations
@using CoreMine.Client.Models.Forms
@using CoreMine.Client.Models.UI
@using CoreMine.Models.Common
@using CoreMine.Models.ViewModels
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<div class="mb-3">
    <button class="btn btn-primary">
        ← Volver
    </button>
</div>

<div class="row">
    <div class="col-md-6 mx-auto">
        <div class="card p-4">
            <h5>Seleccionar Categoría</h5>

            @for (int i = 0; i < categoryLevels.Count; i++)
            {
                var index = i;
                var level = categoryLevels[index];

                <div class="mb-3">
                    <label class="form-label">Categoría</label>
                    <select class="form-select"
                            @onchange="@((ChangeEventArgs e) => OnCategorySelected(index, int.TryParse(e.Value?.ToString(), out var id) ? id : (int?)null))">
                        <option value="">-- Seleccionar --</option>
                        @foreach (var option in level.Options)
                        {
                            <option value="@option.Id" selected="@(option.Id == level.SelectedCategoryId)">
                                @option.Name
                            </option>
                        }
                    </select>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center my-3">
                    <div class="spinner-border" role="status"></div>
                </div>
            }

            @if ((categoryLevels.Count == 1 && categoryLevels[0].SelectedCategoryId == null)
            || categoryLevels.Any(l => l.SelectedCategoryId != null))
            {
                <EditForm Model="categoryModel" OnValidSubmit="SaveCategory">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="card my-3">
                        <div class="card-body">
                            @if (categoryLevels.Any())
                            {
                                <div class="mb-2 text-success">
                                    Categoría seleccionada: @GetSelectedCategoryPath()
                                </div>
                            }
                            else
                            {
                                <div class="mb-2 text-info">
                                    Creando categoría raíz
                                </div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Código</label>
                                <InputText @bind-Value="categoryModel.Code" class="form-control" required />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre</label>
                                <InputText @bind-Value="categoryModel.Name" class="form-control" required />
                            </div>

                        </div>

                        <div class="card-footer text-end">
                            <button type="submit" class="btn btn-primary" disabled="@(!formIsValid)">
                                Guardar categoría
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>

    <div class="col-md-6 mx-auto mt-4">
        <h5>Vista previa</h5>
        <ul class="list-group">
            @if (categoryLevels.Any(l => l.SelectedCategoryId.HasValue))
            {
                @RenderCategoryTreeRecursive(categoryLevels, 0)
            }
            else
            {
                <li class="list-group-item">Sin categoría seleccionada</li>
            }
        </ul>
    </div>
</div>

@code {
    private CategoryNewFormModel categoryModel = new();

    private bool isLoading = false;

    private bool formIsValid =>
        !string.IsNullOrWhiteSpace(categoryModel.Code) &&
        !string.IsNullOrWhiteSpace(categoryModel.Name);

    [Parameter]
    public List<SelectableCategoryLevel> categoryLevels { get; set; } = new();

    [Parameter]
    public bool hasMoreLevels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var rootCategories = await HttpClient.GetFromJsonAsync<PagedResult<CategoryViewModel>>("api/categories?isParent=true");

        if (rootCategories?.Items != null)
        {
            categoryLevels.Add(new SelectableCategoryLevel
            {
                Options = rootCategories.Items.ToList(),
                SelectedCategoryId = null
            });
        }
    }

    private async Task OnCategorySelected(int levelIndex, int? selectedCategoryId)
    {
        isLoading = true;

        if (selectedCategoryId == null)
        {
            if (categoryLevels.Count > levelIndex + 1)
                categoryLevels.RemoveRange(levelIndex + 1, categoryLevels.Count - (levelIndex + 1));

            categoryLevels[levelIndex].SelectedCategoryId = null;

            hasMoreLevels = false;
            isLoading = false;
            return;
        }

        categoryLevels[levelIndex].SelectedCategoryId = selectedCategoryId;

        if (categoryLevels.Count > levelIndex + 1)
            categoryLevels.RemoveRange(levelIndex + 1, categoryLevels.Count - (levelIndex + 1));

        var children = await HttpClient
            .GetFromJsonAsync<PagedResult<CategoryViewModel>>($"api/categories?parentId={selectedCategoryId}");

        if (children?.Items?.Any() == true)
        {
            categoryLevels.Add(new SelectableCategoryLevel
            {
                Options = children.Items.ToList(),
                SelectedCategoryId = null
            });
            hasMoreLevels = true;
        }
        else
        {
            hasMoreLevels = false;
        }

        isLoading = false;
    }

    private async Task SaveCategory()
    {
        var selectedCategoryId = categoryLevels
            .Where(p => p.SelectedCategoryId != null)
            .Select(q => q.SelectedCategoryId)
            .LastOrDefault();

        if (selectedCategoryId == null && categoryLevels.Count == 1)
        {
            // bool confirmAction = await OpenDialogAsync();
            // if (!confirmAction)
            // {
            //     return;
            // }
        }

        var request = new
        {
            Code = categoryModel.Code,
            Name = categoryModel.Name,
            ParentId = selectedCategoryId
        };

        var response = await HttpClient.PostAsJsonAsync("api/categories", request);

        if (response.IsSuccessStatusCode)
        {
            // Snackbar.Add("Se ha guardado la categoría con éxito.", Severity.Success);

            categoryModel = new();
            categoryLevels = new();
            await OnInitializedAsync();
        }
        else
        {
            // Snackbar.Add("Error al guardar la categoría.", Severity.Error);
        }
    }

    // private async Task<bool> OpenDialogAsync()
    // {
    //     var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = true };
    //     var dialog = await DialogService.ShowAsync<ConfirmNewRootCategoryDialog>("¿Crear categoría raíz?", options);
    //     var result = await dialog.Result;

    //     return !result.Canceled && result.Data is bool confirmed && confirmed;
    // }

    private string GetSelectedCategoryPath()
    {
        var names = new List<string>();

        foreach (var level in categoryLevels)
        {
            var selected = level.Options.FirstOrDefault(x => x.Id == level.SelectedCategoryId);
            if (selected != null)
                names.Add(selected.Name);
        }

        return string.Join(" > ", names);
    }

    RenderFragment RenderCategoryTreeRecursive(List<SelectableCategoryLevel> levels, int index) => builder =>
    {
        if (index >= levels.Count)
            return;

        var level = levels[index];
        var selected = level.Options.FirstOrDefault(o => o.Id == level.SelectedCategoryId);

        if (selected != null)
        {
            builder.OpenElement(0, "li");
            builder.AddContent(1, $"{selected.Code} - {selected.Name}");

            builder.OpenElement(2, "ul");
            builder.AddContent(3, RenderCategoryTreeRecursive(levels, index + 1));
            builder.CloseElement();

            builder.CloseElement();
        }
    };
}
