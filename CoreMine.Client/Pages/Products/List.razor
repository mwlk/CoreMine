@page "/products"
@attribute [Authorize]
@using CoreMine.Client.Models.ReadModels
@using CoreMine.Models.Common
@inject HttpClient Http

<h3>Listado de Productos</h3>

<p>Items cargados: @items.Count() | Total: @totalCount</p>

<RadzenDataGrid TItem="ProductReadModel"
                Data="@items"
                Count="@totalCount"
                LoadData="@LoadData"
                AllowPaging="true"
                PageSize="@pageSize"
                AllowSorting="true"
                AllowColumnResize="true"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Mostrando página {0} de {1} (total {2} registros)"
                Style="width: 100%; font-size: 14px;"
                Class="product-grid-container">
    <Columns>
        <!-- ID Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="Id"
                              Title="ID"
                              Width="100px"
                              TextAlign="TextAlign.Center"
                              Frozen="true">
            <Template Context="data">
                <span class="fw-bold text-primary">@data.Id</span>
            </Template>
        </RadzenDataGridColumn>

        <!-- Nombre Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="Name"
                              Title="Nombre del Producto"
                              Width="250px"
                              Frozen="true"
                              Resizable="true">
            <Template Context="data">
                <div class="cell-padding" title="@data.Name">
                    <strong>@(!string.IsNullOrWhiteSpace(data.Name) ? data.Name : "Sin nombre")</strong>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Descripción Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="Description"
                              Title="Descripción"
                              Width="300px"
                              Resizable="true">
            <Template Context="data">
                <div class="cell-padding truncate-text" title="@data.Description">
                    @if (!string.IsNullOrWhiteSpace(data.Description))
                    {
                        <span>@data.Description</span>
                    }
                    else
                    {
                        <em class="text-muted">Sin descripción</em>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Categoría Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="CategoryName"
                              Title="Categoría"
                              Width="180px"
                              Resizable="true">
            <Template Context="data">
                <div class="cell-padding" title="@data.CategoryName">
                    @if (!string.IsNullOrWhiteSpace(data.CategoryName))
                    {
                        <span class="custom-badge badge-secondary">@data.CategoryName</span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Código Categoría Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="FullCategoryCode"
                              Title="Código Cat."
                              Width="120px"
                              TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="code-style">@(!string.IsNullOrWhiteSpace(data.FullCategoryCode) ? data.FullCategoryCode : "-")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Proveedor Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="SupplierName"
                              Title="Proveedor"
                              Width="200px"
                              Resizable="true">
            <Template Context="data">
                <div class="cell-padding" title="@data.SupplierName">
                    @if (!string.IsNullOrWhiteSpace(data.SupplierName))
                    {
                        <span>🏢 @data.SupplierName</span>
                    }
                    else
                    {
                        <span class="text-muted">Sin proveedor</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Precio Unitario Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="UnitPrice"
                              Title="Precio Unit."
                              Width="120px"
                              TextAlign="TextAlign.Right">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="fw-bold text-success">@data.UnitPrice.ToString("C")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Unidad de Medida Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="UnitOfMeasureName"
                              Title="U. Medida"
                              Width="100px"
                              TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="custom-badge badge-info">@(!string.IsNullOrWhiteSpace(data.UnitOfMeasureName) ? data.UnitOfMeasureName : "-")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Estado Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="LastStateTypeName"
                              Title="Estado"
                              Width="120px"
                              TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="cell-padding">
                    @if (!string.IsNullOrWhiteSpace(data.LastStateTypeName))
                    {
                        var badgeClass = GetStateBadgeClass(data.LastStateTypeName);
                        <span class="custom-badge @badgeClass">@data.LastStateTypeName</span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Ubicación Columns -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="LocationId"
                              Title="Cód. Ubic."
                              Width="100px"
                              TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="code-style">@(data.LocationId?.ToString() ?? "-")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="LocationName"
                              Title="Ubicación"
                              Width="180px"
                              Resizable="true">
            <Template Context="data">
                <div class="cell-padding" title="@data.LocationName">
                    @if (!string.IsNullOrWhiteSpace(data.LocationName))
                    {
                        <span>📍 @data.LocationName</span>
                    }
                    else
                    {
                        <span class="text-muted">Sin ubicación</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Cantidad Máxima Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="MaxQuantity"
                              Title="Máx."
                              Width="80px"
                              TextAlign="TextAlign.Right">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="text-info">@(data.MaxQuantity?.ToString("N0") ?? "-")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Cantidad Mínima Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="MinQuantity"
                              Title="Mín."
                              Width="80px"
                              TextAlign="TextAlign.Right">
            <Template Context="data">
                <div class="cell-padding">
                    <span class="text-warning">@(data.MinQuantity?.ToString("N0") ?? "-")</span>
                </div>
            </Template>
        </RadzenDataGridColumn>

        <!-- Stock Actual Column -->
        <RadzenDataGridColumn TItem="ProductReadModel"
                              Property="Quantity"
                              Title="Stock"
                              Width="100px"
                              TextAlign="TextAlign.Right">
            <Template Context="data">
                <div class="cell-padding">
                    @if (data.Quantity.HasValue)
                    {
                        var stockClass = GetStockLevelClass(data.Quantity.Value, data.MinQuantity, data.MaxQuantity);
                        <span class="fw-bold @stockClass">@data.Quantity.Value.ToString("N0")</span>
                        @if (data.MinQuantity.HasValue && data.Quantity < data.MinQuantity)
                        {
                            <span class="text-danger">⚠️</span>
                        }
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@* Agregar estos métodos en el code-behind del componente *@
@code {
    // Método para obtener la clase CSS del badge según el estado
    private string GetStateBadgeClass(string state)
    {
        return state?.ToLower() switch
        {
            "activo" or "disponible" => "badge-success",
            "inactivo" or "no disponible" => "badge-danger",
            "pendiente" => "badge-warning",
            "en proceso" => "badge-info",
            _ => "badge-secondary"
        };
    }

    // Método para obtener la clase CSS según el nivel de stock
    private string GetStockLevelClass(decimal currentStock, decimal? minStock, decimal? maxStock)
    {
        if (minStock.HasValue && currentStock < minStock)
            return "text-danger"; // Stock bajo

        if (maxStock.HasValue && currentStock > maxStock * 0.8m)
            return "text-success"; // Stock alto

        return "text-primary"; // Stock normal
    }
}

@* Estilos CSS simplificados para Blazor *@
<style>
    .product-grid-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .fw-bold {
        font-weight: bold;
    }

    .text-primary {
        color: #0d6efd;
    }

    .text-success {
        color: #198754;
    }

    .text-danger {
        color: #dc3545;
    }

    .text-warning {
        color: #fd7e14;
    }

    .text-info {
        color: #0dcaf0;
    }

    .text-muted {
        color: #6c757d;
    }

    .custom-badge {
        font-size: 0.75em;
        padding: 0.35em 0.65em;
        border-radius: 0.375rem;
        color: white;
        display: inline-block;
    }

    .badge-success {
        background-color: #198754;
    }

    .badge-danger {
        background-color: #dc3545;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #000;
    }

    .badge-info {
        background-color: #0dcaf0;
        color: #000;
    }

    .badge-secondary {
        background-color: #6c757d;
    }

    .code-style {
        font-size: 0.875em;
        background-color: #f8f9fa;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        border: 1px solid #dee2e6;
        font-family: monospace;
    }

    .cell-padding {
        padding: 12px 8px;
        vertical-align: middle;
    }

    .truncate-text {
        max-width: 240px;
        word-wrap: break-word;
        line-height: 1.4;
    }
</style>

<!-- Controles de paginación personalizados -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        <span>Mostrando @((currentPageIndex * pageSize) + 1) a @Math.Min((currentPageIndex + 1) * pageSize, totalCount) de @totalCount registros</span>
    </div>
    <div class="d-flex align-items-center gap-3">
        <div>
            <label class="me-2">Registros por página:</label>
            <RadzenDropDown TValue="int"
                            Data="@pageSizeOptions"
                            Value="@pageSize"
                            Change="@OnPageSizeChanged"
                            Style="width: 80px" />
        </div>
        <div>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="first_page"
                          Click="@(() => GoToPage(0))"
                          Disabled="@(currentPageIndex == 0)" />
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="chevron_left"
                          Click="@(() => GoToPage(currentPageIndex - 1))"
                          Disabled="@(currentPageIndex == 0)" />
            <span class="mx-2">Página @currentPage de @totalPages</span>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="chevron_right"
                          Click="@(() => GoToPage(currentPageIndex + 1))"
                          Disabled="@(currentPageIndex >= totalPages - 1)" />
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="last_page"
                          Click="@(() => GoToPage(totalPages - 1))"
                          Disabled="@(currentPageIndex >= totalPages - 1)" />
        </div>
    </div>
</div>

@code {
    private IEnumerable<ProductReadModel> items = new List<ProductReadModel>();
    private int totalCount = 0;
    private int pageSize = 10;
    private int currentPageIndex = 0;

    private readonly List<int> pageSizeOptions = new() { 5, 10, 25, 50, 100 };

    private int currentPage => currentPageIndex + 1;
    private int totalPages => pageSize == 0 ? 1 : (int)Math.Ceiling((double)totalCount / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new LoadDataArgs { Skip = 0, Top = pageSize });
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            int top = args.Top ?? pageSize;
            int skip = args.Skip ?? 0;

            currentPageIndex = skip / top;

            var url = $"api/products?pageNumber={currentPage}&pageSize={top}";
            var response = await Http.GetFromJsonAsync<PagedResult<ProductReadModel>>(url);

            if (response != null)
            {
                items = response.Items ?? new List<ProductReadModel>();
                totalCount = response.TotalCount;
            }
            else
            {
                items = new List<ProductReadModel>();
                totalCount = 0;
            }

            // Forzar actualización de la UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadData Error: {ex.Message}");
            items = new List<ProductReadModel>();
            totalCount = 0;
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPageIndex = 0; // Resetear a la primera página

            // Cargar datos con el nuevo tamaño de página
            await LoadData(new LoadDataArgs { Top = pageSize, Skip = 0 });
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < totalPages)
        {
            currentPageIndex = pageIndex;
            await LoadData(new LoadDataArgs { Skip = currentPageIndex * pageSize, Top = pageSize });
        }
    }
}