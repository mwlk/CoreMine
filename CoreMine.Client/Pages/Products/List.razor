@page "/products"
@using CoreMine.Models.Common
@using CoreMine.Models.ViewModels
@inject HttpClient HttpClient

<h3>Productos</h3>

<div class="mb-3">
    <input class="form-control"
           @bind="searchString"
           @bind:event="oninput"
           placeholder="Buscar..."
           @onkeydown="HandleKeyDown" />
</div>

<table class="table table-striped table-hover table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Código</th>
            <th>Nombre</th>
            <th>Categoría</th>
        </tr>
    </thead>
    <tbody>
        @if (items is not null && items.Count > 0)
        {
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.FullCategoryCode</td>
                    <td>@item.Name</td>
                    <td>@item.CategoryName</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" class="text-center">No hay productos disponibles.</td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Anterior</button>
    <span>Página @currentPage de @totalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Siguiente</button>
</div>

@code {
    private int currentPage = 1;
    private int rowsPerPage = 2;
    private int totalPages = 1;
    private string searchString = string.Empty;
    private List<ProductViewModel> items = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var url = $"api/products?pageNumber={currentPage}&pageSize={rowsPerPage}";

        if (!string.IsNullOrWhiteSpace(searchString))
            url += $"&Name={Uri.EscapeDataString(searchString)}";

        var response = await HttpClient.GetFromJsonAsync<PagedResult<ProductViewModel>>(url);

        items = response?.Items?.ToList() ?? new List<ProductViewModel>();
        var totalItems = response?.TotalCount ?? 0;
        totalPages = (int)Math.Ceiling(totalItems / (double)rowsPerPage);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadData();
        }
    }

    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
}
