@page "/categories"
@attribute [Authorize]
@using CoreMine.Models.Common
@using CoreMine.Models.ViewModels
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<h3>Listado de Categorias</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@(() => {})">
        Agregar
    </RadzenButton>
</div>

<p>Categorias listadas: @items.Count() | Total: @totalCount</p>

<RadzenDataGrid TItem="CategoryViewModel"
                Data="@items"
                Count="@totalCount"
                LoadData="@LoadData"
                AllowPaging="true"
                PageSize="@pageSize"
                AllowSorting="true"
                AllowColumnResize="true"
                AllowFiltering="false"
                FilterMode="FilterMode.Simple"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                PagingSummaryFormat="Mostrando página {0} de {1} (total {2} registros)"
                Style="width: 100%; font-size: 14px;"
                Class="shadow-sm rounded border">

    <Columns>
        <RadzenDataGridColumn TItem="CategoryViewModel" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <span class="fw-semibold">@data.Id</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CategoryViewModel" Property="Code" Title="Código" Width="200px">
            <Template Context="data">
                <span>@data.Code</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CategoryViewModel" Property="Name" Title="Nombre" Width="250px">
            <Template Context="data">
                <span>@data.Name</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CategoryViewModel" Property="FullCode" Title="Código Completo" Width="250px">
            <Template Context="data">
                <span class="text-muted">@data.FullCode</span>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<!-- Controles de paginación personalizados -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        <span>Mostrando @((currentPageIndex * pageSize) + 1) a @Math.Min((currentPageIndex + 1) * pageSize, totalCount) de @totalCount registros</span>
    </div>
    <div class="d-flex align-items-center gap-3">
        <div>
            <label class="me-2">Registros por página:</label>
            <RadzenDropDown TValue="int"
                            Data="@pageSizeOptions"
                            Value="@pageSize"
                            Change="@OnPageSizeChanged"
                            Style="width: 80px" />
        </div>
        <div>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="first_page"
                          Click="@(() => GoToPage(0))"
                          Disabled="@(currentPageIndex == 0)" />
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="chevron_left"
                          Click="@(() => GoToPage(currentPageIndex - 1))"
                          Disabled="@(currentPageIndex == 0)" />
            <span class="mx-2">Página @currentPage de @totalPages</span>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="chevron_right"
                          Click="@(() => GoToPage(currentPageIndex + 1))"
                          Disabled="@(currentPageIndex >= totalPages - 1)" />
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Icon="last_page"
                          Click="@(() => GoToPage(totalPages - 1))"
                          Disabled="@(currentPageIndex >= totalPages - 1)" />
        </div>
    </div>
</div>

@code {
    private IEnumerable<CategoryViewModel> items = new List<CategoryViewModel>();
    private int totalCount = 0;
    private int pageSize = 10;
    private int currentPageIndex = 0;

    private readonly List<int> pageSizeOptions = new() { 5, 10, 25, 50, 100 };

    private int currentPage => currentPageIndex + 1;
    private int totalPages => pageSize == 0 ? 1 : (int)Math.Ceiling((double)totalCount / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new LoadDataArgs { Skip = 0, Top = pageSize });
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            int top = args.Top ?? pageSize;
            int skip = args.Skip ?? 0;

            currentPageIndex = skip / top;

            var queryParams = new List<string>
            {
                $"pageNumber={currentPage}",
                $"pageSize={top}"
            };

            var url = $"api/productCategories?{string.Join('&', queryParams)}";
            var response = await HttpClient.GetFromJsonAsync<PagedResult<CategoryViewModel>>(url);

            items = response?.Items ?? new List<CategoryViewModel>();
            totalCount = response?.TotalCount ?? 0;
        }
        catch
        {
            items = new List<CategoryViewModel>();
            totalCount = 0;
        }

        StateHasChanged();
    }

    private async Task OnPageSizeChanged(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPageIndex = 0;
            await LoadData(new LoadDataArgs { Top = pageSize, Skip = 0 });
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < totalPages)
        {
            currentPageIndex = pageIndex;
            await LoadData(new LoadDataArgs { Skip = currentPageIndex * pageSize, Top = pageSize });
        }
    }
}
