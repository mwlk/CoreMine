@page "/categories"
@using MiVivero.Models.ViewModels

@inject HttpClient HttpClient


<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Categorias</MudText>

    <MudProgressCircular Indeterminate="true" Class="my-2" Color="Color.Secondary" Style="@(loading ? "": "display:none")" />

    <MudTextField @bind-Value="searchString" Placeholder="Buscar..." Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-4" />

    <MudTable T="CategoryViewModel" Items="@FilteredCategories" Dense="true" Hover="true" Striped="true" Bordered="true"
              SortLabel="Ordenar por" Breakpoint="Breakpoint.Sm">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Listado de Categorias</MudText>
        </ToolBarContent>

        <HeaderContent>
            <MudTh SortBy="(ProductViewModel x) => x.Id">Id</MudTh>
            <MudTh SortBy="(ProductViewModel x) => x.FullCode">Código</MudTh>
            <MudTh SortBy="(ProductViewModel x) => x.Name">Nombre</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Código">@context.FullCode</MudTd>
            <MudTd DataLabel="Nombre">@context.Name</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private List<CategoryViewModel>? categories;
    private bool loading = false;
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetCategoriesAsync();
        loading = false;
    }

    private async Task GetCategoriesAsync()
    {
        categories = await HttpClient.GetFromJsonAsync<List<CategoryViewModel>>("api/categories");
    }

    private IEnumerable<CategoryViewModel> FilteredCategories =>
        string.IsNullOrWhiteSpace(searchString) ? categories ?? new List<CategoryViewModel>() :
        categories!.Where(p =>
            (p.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (p.Code?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false));
}