@page "/categories/new"

@using System.ComponentModel.DataAnnotations
@using MiVivero.Client.Models.Forms
@using MiVivero.Client.Models.UI
@using MiVivero.Client.Shared.Dialogs
@using MiVivero.Models.Common
@using MiVivero.Models.ViewModels
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudItem Class="pb-4">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ChevronLeft"
               OnClick="@(() => NavManager.NavigateTo("/categories"))">
        Volver
    </MudButton>
</MudItem>


<MudGrid>
    <MudItem xs="12" md="6" Class="mx-auto">
        <MudPaper Class="p-4">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h6">Seleccionar Categoría</MudText>

                @for (int i = 0; i < categoryLevels.Count; i++)
                {
                    var index = i;

                    var level = categoryLevels[index];

                    <MudSelect T="int?" Label="Categoría"
                               Value="categoryLevels[index].SelectedCategoryId"
                               ValueChanged="@(v => OnCategorySelected(index, v))"
                               Dense="true"
                               Clearable="true">
                        <MudSelectItem T="int?" Value="null">-- Seleccionar --</MudSelectItem>
                        @foreach (var option in categoryLevels[index].Options)
                        {
                            <MudSelectItem T="int?" Value="option.Id">@option.Name</MudSelectItem>
                        }
                    </MudSelect>
                }


                @if (isLoading)
                {
                    <MudProgressCircular Indeterminate="true" />
                }

                @if (!categoryLevels.Any()
                || (categoryLevels.Count == 1 && categoryLevels[0].SelectedCategoryId == null)
                || categoryLevels.LastOrDefault()?.SelectedCategoryId != null
                || hasMoreLevels)
                {
                    <EditForm Model="categoryModel" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <MudCard>
                            <MudCardContent>
                                @if (categoryLevels.Any())
                                {
                                    <MudText Typo="Typo.body1" Color="Color.Success">
                                        Categoría seleccionada: @GetSelectedCategoryPath()
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body1" Color="Color.Info">
                                        Creando categoría raíz
                                    </MudText>
                                }

                                <MudTextField @bind-Value="categoryModel.Code"
                                              Label="Código"
                                              Variant="Variant.Outlined"
                                              For="@(() => categoryModel.Code)"
                                              Immediate="true"
                                              Required="true"
                                              RequiredError="El código es obligatorio"
                                              @ref="codeFieldRef" />

                                <MudTextField @bind-Value="categoryModel.Name"
                                              Label="Nombre"
                                              Variant="Variant.Outlined"
                                              For="@(() => categoryModel.Name)"
                                              Immediate="true"
                                              Required="true"
                                              RequiredError="El nombre es obligatorio" />
                            </MudCardContent>

                            <MudCardActions>
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Filled"
                                           Disabled="@(!formIsValid)"
                                           ButtonType="ButtonType.Submit">
                                    Guardar categoría
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                }
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6" Class="mx-auto">
        <MudTreeView T="string" Hover="true" Dense="true">
            @if (categoryLevels.Any(l => l.SelectedCategoryId.HasValue))
            {
                <MudTreeView T="string" Hover="true" Dense="true">
                    @if (categoryLevels.Any(l => l.SelectedCategoryId.HasValue))
                    {
                        @RenderCategoryTreeRecursive(categoryLevels, 0)
                    }
                    else
                    {
                        <MudTreeViewItem Text="Sin categoría seleccionada" />
                    }
                </MudTreeView>
            }
            else
            {
                <MudTreeViewItem Text="Sin categoría seleccionada" />
            }
        </MudTreeView>
    </MudItem>
</MudGrid>

@code {
    private CategoryNewFormModel categoryModel = new();
    private MudTextField<string> codeFieldRef;

    private bool isLoading = false;

    private bool formIsValid =>
        !string.IsNullOrWhiteSpace(categoryModel.Code) &&
        !string.IsNullOrWhiteSpace(categoryModel.Name);

    [Parameter]
    public List<SelectableCategoryLevel> categoryLevels { get; set; } = new();

    [Parameter]
    public bool hasMoreLevels { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var rootCategories = await HttpClient.GetFromJsonAsync<PagedResult<CategoryViewModel>>("api/categories?isParent=true");

        if (rootCategories?.Items != null)
        {
            categoryLevels.Add(new SelectableCategoryLevel
                {
                    Options = rootCategories.Items.ToList(),
                    SelectedCategoryId = null
                });
        }
    }

    private async Task OnCategorySelected(int levelIndex, int? selectedCategoryId)
    {
        isLoading = true;

        categoryModel = new();

        if (levelIndex < 0 || levelIndex >= categoryLevels.Count)
        {
            isLoading = false;
            return;
        }

        // Limitar los niveles visibles
        categoryLevels = categoryLevels.Take(levelIndex + 1).ToList();

        categoryLevels[levelIndex].SelectedCategoryId = selectedCategoryId;

        // Si la categoría seleccionada es null, no se cargan más niveles
        if (selectedCategoryId is null)
        {
            hasMoreLevels = false;
            isLoading = false;
            return;
        }

        // Obtener los hijos de la categoría seleccionada
        var children = await HttpClient.GetFromJsonAsync<PagedResult<CategoryViewModel>>(
            $"api/categories?parentId={selectedCategoryId}");

        if (children?.Items?.Any() == true)
        {
            categoryLevels.Add(new SelectableCategoryLevel
                {
                    Options = children.Items.ToList(),
                    SelectedCategoryId = null
                });
            hasMoreLevels = true;
        }
        else
        {
            hasMoreLevels = false;
        }

        isLoading = false;
    }

   

    private async Task SaveCategory()
    {
        var selectedCategoryId = categoryLevels
            .Where(p => p.SelectedCategoryId != null)
            .Select(q => q.SelectedCategoryId)
            .LastOrDefault();

        if (selectedCategoryId == null && categoryLevels.Count == 1)
        {
            bool confirmAction = await OpenDialogAsync();
            if (!confirmAction)
            {
                return;
            }
        }

        var request = new
        {
            Code = categoryModel.Code,
            Name = categoryModel.Name,
            ParentId = selectedCategoryId
        };

        var response = await HttpClient.PostAsJsonAsync("api/categories", request);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Se ha guardado la categoría con éxito.", Severity.Success);

            categoryModel = new();
            categoryLevels = new();
            await OnInitializedAsync();
        }
        else
        {
            Snackbar.Add("Error al guardar la categoría.", Severity.Error);
        }
    }

    private async Task<bool> OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = true };
        var dialog = await DialogService.ShowAsync<ConfirmNewRootCategoryDialog>("¿Crear categoría raíz?", options);
        var result = await dialog.Result;

        return !result.Canceled && result.Data is bool confirmed && confirmed;
    }

    private string GetSelectedCategoryPath()
    {
        var names = new List<string>();

        foreach (var level in categoryLevels)
        {
            var selected = level.Options.FirstOrDefault(x => x.Id == level.SelectedCategoryId);
            if (selected != null)
                names.Add(selected.Name);
        }

        return string.Join(" > ", names);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && codeFieldRef is not null)
        {
            await codeFieldRef.FocusAsync();
        }
    }

    RenderFragment RenderCategoryTreeRecursive(List<SelectableCategoryLevel> levels, int index) => builder =>
       {
           if (index >= levels.Count)
               return;

           var level = levels[index];
           var selected = level.Options.FirstOrDefault(o => o.Id == level.SelectedCategoryId);

           if (selected != null)
           {
               builder.OpenComponent<MudTreeViewItem<string>>(0);
               builder.AddAttribute(1, "Text", $"{selected.Code} - {selected.Name}");
               builder.AddAttribute(2, "Expanded", true);
               builder.AddAttribute(3, "ChildContent", RenderCategoryTreeRecursive(levels, index + 1));
               builder.CloseComponent();
           }
       };
}
